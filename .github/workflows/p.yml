name: p

on:
  schedule:
    # - cron: "0 2,8,14,20 * * *"
    - cron: "*/5 * * * *"
  workflow_dispatch:
  watch:
    # types: started

jobs:
  build:
    concurrency: p-singleton
    runs-on: ubuntu-latest
    steps:
      # - name: Check Workflow Status
      #   run: |
      #     workflow_runs=$(curl -s -X GET \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       -H "Authorization: Bearer ${{ secrets.PAT }}" \
      #       "https://api.github.com/repos/${{ github.repository }}/actions/runs")
          
      #     isRunning=$(echo "$workflow_runs" | jq '.workflow_runs[] | select(.name == "p" and .status == "in_progress")')
          
      #     if [[ -n $isRunning ]]; then
      #       echo "Another workflow is already running. Aborting current workflow."
      #       exit 0
      #     else
      #       echo "No running workflows found. Continuing with the workflow execution."
      #     fi
      - name: rclone-install
        run: |
          # 安装 rclone
          curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          # curl -O https://beta.rclone.org/rclone-beta-latest-linux-amd64.zip
          unzip rclone-*-amd64.zip
          cd rclone-*-linux-amd64
          sudo mv rclone /usr/bin
          sudo chmod +x /usr/bin/rclone
          # sudo apt-get install rclone
      - name: rclone-config
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE }}
        run: |
          # 写配置文件
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
      - name: rclone-run
        run: |
          sudo apt-get install fuse3
          sudo mkdir /dropbox
          sudo nohup rclone mount dropbox: /dropbox --vfs-cache-mode full &
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:
      - name: Check if the tunnel is running
        env:
          TUNNEL_NAME: "p" # 替换为你的隧道名称
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          sudo mkdir ~/.cloudflared/
          sudo rclone copy dropbox:self-hosted/.cloudflared ~/.cloudflared -vv

          # 获取隧道列表
          OUTPUT=$(cloudflared tunnel list)
          
          # 查找目标隧道的行
          TUNNEL_LINE=$(echo "$OUTPUT" | grep -w "$TUNNEL_NAME")
          if [ -z "$TUNNEL_LINE" ]; then
            echo "The tunnel '$TUNNEL_NAME' does not exist. Proceeding."
            exit 31
          fi
  
          # 提取 CONNECTIONS 列并检查是否为空
          CONNECTIONS=$(echo "$TUNNEL_LINE" | awk '{if (NF>=4) print $4; else print "-"}')
          if [ "$CONNECTIONS" == "-" ]; then
            echo "The tunnel '$TUNNEL_NAME' exists but has no active connections. Proceeding."
          else
            echo "The tunnel '$TUNNEL_NAME' is running with connections: $CONNECTIONS. Stopping actions."
            exit 0
          fi
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      - name: Run vaultwarden container
        run: ${{ secrets.VAULTWARDEN }}
      - name: Verify container is running
        run: docker ps    
      - name: run cloudflared
        run: |
          cloudflared tunnel route dns p p.'${{ secrets.VD }}'.eu.org
          nohup cloudflared tunnel run --url http://127.0.0.1:5600 p &
      - name: sleep
        run: |
          sudo sleep 350m          
      - name: Stop
        run: |
          docker stop vaultwarden
          sleep 1m 
          echo "Stopping GitHub Actions"
          exit 1
