name: openlist

on:
  schedule:
    # - cron: "0 1,7,13,19 * * *"
    - cron: "*/5 * * * *"
  workflow_dispatch:
  # workflow_run:
  #   workflows:
  #     - t
  #   types:
  #     - completed  # 工作流完成后触发
  watch:
    # types: started

jobs:
  build:
    concurrency: openlist-singleton
    runs-on: ubuntu-latest
    # timeout-minutes: 60
    steps:
      - name: rclone-install
        run: |
          curl -O https://beta.rclone.org/rclone-beta-latest-linux-amd64.zip
          unzip rclone-*-amd64.zip
          cd rclone-*-linux-amd64
          sudo mv rclone /usr/bin
          sudo chmod +x /usr/bin/rclone
      - name: rclone-config
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE }}
        run: |
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
      - name: rclone-run
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:

          sudo apt-get install fuse3
          sudo mkdir -p /dropbox
          sudo nohup rclone mount dropbox: /dropbox --allow-non-empty --no-gzip-encoding --umask 000 --allow-other --attr-timeout 10m --vfs-cache-mode full --vfs-cache-max-age 5m --vfs-read-chunk-size-limit 10G --buffer-size 100M --vfs-cache-max-size 10G &
      - name: Run openlist container
        run: docker run -d --restart=unless-stopped -v /dropbox/self-hosted/openlist/data:/opt/openlist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name="openlist" openlistteam/openlist:latest
      - name: sleep
        run: |
          sudo sleep 1m      
      - name: Verify docker container is running
        run: docker ps
        
      # ====================================================================
      # ================= 视频切割步骤 (最终递归搜索版) ====================
      # ====================================================================
      - name: Split large videos in onedrive:1 (Recursive)
        run: |
          # 1. 安装 ffmpeg, jq, 和 coreutils (为了 dirname)
          echo "Installing ffmpeg, jq, and coreutils..."
          sudo apt-get update && sudo apt-get install -y ffmpeg jq coreutils
          
          # 2. 定义参数
          LIMIT_BYTES=4000000000
          REMOTE_PATH="onedrive:1"
          TEMP_DIR="temp_split_videos"
          mkdir -p "$TEMP_DIR"

          echo "Searching for video files larger than 4GB in ${REMOTE_PATH} and all subdirectories..."

          # 3. 使用 rclone lsjson --recursive 递归查找并筛选大视频文件
          rclone lsjson --recursive ${REMOTE_PATH} --min-size 4G | jq -c '.[] | select((.Path | test("\\.(mp4|mkv|mov|avi|flv|webm)$"; "i")) and .IsDir == false)' | while IFS= read -r json_line; do
            video_file=$(echo "$json_line" | jq -r '.Path')
            FILE_SIZE=$(echo "$json_line" | jq -r '.Size')

            echo "-----------------------------------------------------"
            echo "Found large video: \"$video_file\""

            # 4. 下载大文件到本地临时目录
            echo "Downloading..."
            rclone copy "${REMOTE_PATH}/${video_file}" "$TEMP_DIR"
            if [ $? -ne 0 ]; then
                echo "Error: Failed to download \"$video_file\". Skipping."
                continue
            fi

            LOCAL_FILE_PATH="${TEMP_DIR}/$(basename -- "$video_file")"
            
            # 5. 计算切割参数
            DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$LOCAL_FILE_PATH")
            NUM_PARTS=$(awk "BEGIN {print int(($FILE_SIZE + $LIMIT_BYTES - 1) / $LIMIT_BYTES)}")
            
            if [ "$NUM_PARTS" -le 1 ]; then
                echo "\"$video_file\" does not need splitting. Skipping."
                rm -f "$LOCAL_FILE_PATH"
                continue
            fi
            
            SEGMENT_DURATION=$(awk "BEGIN {print $DURATION / $NUM_PARTS}")

            echo "File size: $(numfmt --to=iec $FILE_SIZE), Duration: $DURATION s"
            echo "Splitting into $NUM_PARTS parts, each approx $SEGMENT_DURATION seconds long."

            BASENAME=$(basename -- "$video_file")
            FILENAME="${BASENAME%.*}"
            EXTENSION="${BASENAME##*.}"

            # 6. 执行 ffmpeg 切割
            ffmpeg -i "$LOCAL_FILE_PATH" -c copy -map 0 -f segment -segment_time "$SEGMENT_DURATION" -reset_timestamps 1 "${TEMP_DIR}/${FILENAME}_part%03d.${EXTENSION}"
            
            if [ $? -ne 0 ]; then
                echo "Error: FFmpeg failed to split \"$video_file\". Skipping."
                rm -f "${TEMP_DIR}/${FILENAME}"*
                rm -f "$LOCAL_FILE_PATH"
                continue
            fi
            
            # 7. 确定原始目录并上传切割后的小文件到【原始目录】
            original_dir=$(dirname "$video_file")
            # 如果文件在根目录, dirname会返回'.', rclone能正确处理
            echo "Uploading split parts to ${REMOTE_PATH}/${original_dir}/"
            rclone move "$TEMP_DIR" "${REMOTE_PATH}/${original_dir}/" --include "${FILENAME}_part*.*" --delete-empty-src-dirs
            
            # 8. 删除云端的原始大文件
            echo "Deleting original file: ${REMOTE_PATH}/${video_file}"
            rclone delete "${REMOTE_PATH}/${video_file}"

            # 9. 清理本地的原始下载文件
            rm -f "$LOCAL_FILE_PATH"

          done
          
          # 10. 清理临时工作目录
          rm -rf "$TEMP_DIR"
          echo "-----------------------------------------------------"
          echo "Video splitting process completed."

      - name: rclone-sync
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:
          echo "==========openlist==========="
          rclone lsf openlist:

          echo "==========  onedrive:  ==========="
          rclone ls onedrive: \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:0  ==========="
          rclone ls onedrive:0 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:1  ==========="
          rclone ls onedrive:1 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:2  ==========="
          rclone ls onedrive:2 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:3  ==========="
          rclone ls onedrive:3 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:4  ==========="
          rclone ls onedrive:4 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:5  ==========="
          rclone ls onedrive:5 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8


          sudo rclone sync onedrive: openlist:baidupanCrypt/onedrive \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --progress --fast-list --size-only --transfers 1 --checkers 32  
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 任务执行完毕"
      
          sudo rclone sync onedrive:1 openlist:baidupanCrypt/1 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 1 任务执行完毕"

          sudo rclone sync onedrive:2 openlist:aliyundriveCrypt/2 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 2 任务执行完毕"

          sudo rclone sync onedrive:3 openlist:aliyundriveCrypt/3 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 3 任务执行完毕"

          sudo rclone sync onedrive:4 openlist:123pan2Crypt/4 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 4任务执行完毕"

          sudo rclone sync onedrive:5 openlist:123pan2Crypt/5 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 5任务执行完毕"
