name: openlist

on:
  schedule:
    # - cron: "0 1,7,13,19 * * *"
    - cron: "*/5 * * * *"
  workflow_dispatch:
  # workflow_run:
  #   workflows:
  #     - t
  #   types:
  #     - completed  # 工作流完成后触发
  watch:
    # types: started

jobs:
  build:
    concurrency: openlist-singleton
    runs-on: ubuntu-latest
    # timeout-minutes: 60
    steps:
    #   - name: Check Workflow Status
    #     run: |
    #       # 获取当前工作流的运行ID
    #       CURRENT_RUN_ID=${{ github.run_id }}
    
    #       workflow_runs=$(curl -s -X GET \
    #         -H "Accept: application/vnd.github.v3+json" \
    #         -H "Authorization: Bearer ${{ secrets.PAT }}" \
    #         "https://api.github.com/repos/${{ github.repository }}/actions/runs")
    
    #       # 排除当前运行ID后检查是否有其他运行中的工作流
    #       otherRunning=$(echo "$workflow_runs" | jq --arg current_id "$CURRENT_RUN_ID" \
    #         '.workflow_runs[] | select(.name == "openlist" and .status == "in_progress" and .id != ($current_id | tonumber))')
    
    #       if [[ -n $otherRunning ]]; then
    #         echo "Another workflow is already running. Aborting current workflow."
    #         exit 31
    #       else
    #         echo "No other running workflows found. Continuing."
    #       fi
      - name: rclone-install
        run: |
          # 安装 rclone
          # curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          curl -O https://beta.rclone.org/rclone-beta-latest-linux-amd64.zip
          unzip rclone-*-amd64.zip
          cd rclone-*-linux-amd64
          sudo mv rclone /usr/bin
          sudo chmod +x /usr/bin/rclone
          # sudo apt-get install rclone
      - name: rclone-config
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE }}
        run: |
          # 写配置文件
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
      - name: rclone-run
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:

          sudo apt-get install fuse3
          sudo mkdir -p /dropbox
          sudo nohup rclone mount dropbox: /dropbox --allow-non-empty --no-gzip-encoding --umask 000 --allow-other --attr-timeout 10m --vfs-cache-mode full --vfs-cache-max-age 5m --vfs-read-chunk-size-limit 10G --buffer-size 100M --vfs-cache-max-size 10G &
      - name: Run openlist container
        run: docker run -d --restart=unless-stopped -v /dropbox/self-hosted/openlist/data:/opt/openlist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name="openlist" openlistteam/openlist:latest
      - name: sleep
        run: |
          sudo sleep 1m    
      - name: Verify docker container is running
        run: docker ps
      - name: video-split
        run: |
          # 安装ffmpeg用于视频处理
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
          # 创建临时目录用于处理视频
          mkdir -p /tmp/video_processing
          
          # 查找onedrive:1中超过4G的视频文件
          echo "查找onedrive:1中超过4G的视频文件..."
          # 使用正确的rclone命令格式，确保路径正确
          rclone ls onedrive:1 --min-size 4G --size-only --include "*.mp4" --include "*.mkv" --include "*.avi" --include "*.mov" --include "*.wmv" --include "*.flv" --include "*.webm" --include "*.m4v" --include "*.3gp" > /tmp/large_videos.txt
          
          # 检查是否找到文件
          if [ ! -s /tmp/large_videos.txt ]; then
            echo "未找到超过4G的视频文件"
            exit 0
          fi
          
          # 处理每个大视频文件
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              # 使用更稳健的方法提取文件路径，处理特殊字符
              size=$(echo "$line" | awk '{print $1}')
              filepath=$(echo "$line" | sed 's/^[0-9]* //')
              filename=$(basename "$filepath")
              
              # 检查文件名是否包含非法字符
              if echo "$filename" | grep -q '[^[:print:]]'; then
                echo "跳过包含非法字符的文件: $filepath"
                continue
              fi
              
              echo "处理文件: $filepath (大小: $size)"
              
              # 检查文件是否存在
              echo "检查文件是否存在..."
              rclone lsf "onedrive:1/$filepath" > /dev/null 2>&1
              if [ $? -ne 0 ]; then
                echo "文件不存在或路径错误: $filepath"
                continue
              fi
              
              # 下载视频文件到临时目录
              echo "下载文件..."
              rclone copy "onedrive:1/$filepath" /tmp/video_processing/
              
              # 检查文件是否成功下载
              if [ ! -f "/tmp/video_processing/$filename" ]; then
                echo "文件下载失败: $filename"
                continue
              fi
              
              # 获取视频时长（秒）
              duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "/tmp/video_processing/$filename" 2>/dev/null | cut -d. -f1)
              if [ -z "$duration" ]; then
                echo "无法获取视频时长，跳过此文件"
                rm -f "/tmp/video_processing/$filename"
                continue
              fi
              
              # 计算需要分割的段数（每段不超过3.8G，留一些余量）
              target_size=3800000000  # 3.8G in bytes
              file_size=$(stat -c%s "/tmp/video_processing/$filename")
              segments=$(( (file_size + target_size - 1) / target_size ))
              
              echo "视频时长: ${duration}秒, 需要分割成 $segments 段"
              
              if [ $segments -gt 1 ]; then
                # 计算每段的时长
                segment_duration=$(( duration / segments ))
                
                # 分割视频
                for ((i=0; i<$segments; i++)); do
                  start_time=$(( i * segment_duration ))
                  
                  # 如果是最后一段，确保覆盖到视频结束
                  if [ $i -eq $((segments-1)) ]; then
                    ffmpeg -i "/tmp/video_processing/$filename" -ss $start_time -c copy -avoid_negative_ts make_zero "/tmp/video_processing/${filename%.*}_part$((i+1)).${filename##*.}" 2>/dev/null
                  else
                    ffmpeg -i "/tmp/video_processing/$filename" -ss $start_time -t $segment_duration -c copy -avoid_negative_ts make_zero "/tmp/video_processing/${filename%.*}_part$((i+1)).${filename##*.}" 2>/dev/null
                  fi
                  
                  if [ $? -eq 0 ]; then
                    echo "已创建分段: ${filename%.*}_part$((i+1)).${filename##*.}"
                  else
                    echo "分割失败: ${filename%.*}_part$((i+1)).${filename##*.}"
                  fi
                done
                
                # 上传分割后的文件到onedrive:1
                echo "上传分割后的文件..."
                for part_file in /tmp/video_processing/${filename%.*}_part*; do
                  if [ -f "$part_file" ]; then
                    part_filename=$(basename "$part_file")
                    # 上传到原目录
                    rclone copy "$part_file" "onedrive:1/$(dirname "$filepath")/"
                    if [ $? -eq 0 ]; then
                      echo "已上传: $part_filename"
                    else
                      echo "上传失败: $part_filename"
                    fi
                  fi
                done
                
                # 删除原始大文件（可选，取消注释以下行来启用）
                # echo "删除原始大文件..."
                # rclone delete "onedrive:1/$filepath"
                
              else
                echo "文件不需要分割"
              fi
              
              # 清理临时文件
              rm -f "/tmp/video_processing/$filename"
              rm -f /tmp/video_processing/${filename%.*}_part*
            fi
          done < /tmp/large_videos.txt
          
          # 清理临时文件
          rm -f /tmp/large_videos.txt
          rm -rf /tmp/video_processing
          
          echo "视频分割处理完成"
          
      - name: rclone-sync
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:
          echo "==========openlist==========="
          rclone lsf openlist:

          echo "==========  onedrive:  ==========="
          rclone ls onedrive: \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:0  ==========="
          rclone ls onedrive:0 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:1  ==========="
          rclone ls onedrive:1 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:2  ==========="
          rclone ls onedrive:2 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:3  ==========="
          rclone ls onedrive:3 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:4  ==========="
          rclone ls onedrive:4 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:5  ==========="
          rclone ls onedrive:5 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8

          
          # # 统计 onedrive:0 的总大小
          # echo "==========  onedrive:0  ==========="
          # rclone size onedrive:0
          
          # # 统计 onedrive:1 的总大小
          # echo "==========  onedrive:1  ==========="
          # rclone size onedrive:1
          
          # # 统计 onedrive:2 的总大小
          # echo "==========  onedrive:2  ==========="
          # rclone size onedrive:2
          
          # # 统计 onedrive:3 的总大小
          # echo "==========  onedrive:3  ==========="
          # rclone size onedrive:3
          
          # # 统计 onedrive:4 的总大小
          # echo "==========  onedrive:4  ==========="
          # rclone size onedrive:4
          
          # # 统计 onedrive:5 的总大小
          # echo "==========  onedrive:5  ==========="
          # rclone size onedrive:5
          
          # # 统计根目录（排除子目录 1-5）的总大小
          # echo "==========  onedrive: (excluding 1-5) ==========="
          # rclone size onedrive: \
          #     --exclude "1/**" \
          #     --exclude "2/**" \
          #     --exclude "3/**" \
          #     --exclude "4/**" \
          #     --exclude "5/**"
          


          sudo rclone sync onedrive: openlist:baidupanCrypt/onedrive \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --progress --fast-list --size-only --transfers 1 --checkers 32 
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 任务执行完毕"
     
          sudo rclone sync onedrive:1 openlist:baidupanCrypt/1 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 1 任务执行完毕"

          sudo rclone sync onedrive:2 openlist:aliyundriveCrypt/2 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 2 任务执行完毕"

          sudo rclone sync onedrive:3 openlist:aliyundriveCrypt/3 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 3 任务执行完毕"

          sudo rclone sync onedrive:4 openlist:123pan2Crypt/4 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 4任务执行完毕"

          sudo rclone sync onedrive:5 openlist:123pan2Crypt/5 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 5任务执行完毕"
