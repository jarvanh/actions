name: openlist

on:
  schedule:
    # - cron: "0 1,7,13,19 * * *"
    - cron: "*/5 * * * *"
  workflow_dispatch:
  # workflow_run:
  #   workflows:
  #     - t
  #   types:
  #     - completed  # 工作流完成后触发
  watch:
    # types: started

jobs:
  build:
    concurrency: openlist-singleton
    runs-on: ubuntu-latest
    # timeout-minutes: 60
    steps:
    #   - name: Check Workflow Status
    #     run: |
    #       # 获取当前工作流的运行ID
    #       CURRENT_RUN_ID=${{ github.run_id }}
    
    #       workflow_runs=$(curl -s -X GET \
    #         -H "Accept: application/vnd.github.v3+json" \
    #         -H "Authorization: Bearer ${{ secrets.PAT }}" \
    #         "https://api.github.com/repos/${{ github.repository }}/actions/runs")
    
    #       # 排除当前运行ID后检查是否有其他运行中的工作流
    #       otherRunning=$(echo "$workflow_runs" | jq --arg current_id "$CURRENT_RUN_ID" \
    #         '.workflow_runs[] | select(.name == "openlist" and .status == "in_progress" and .id != ($current_id | tonumber))')
    
    #       if [[ -n $otherRunning ]]; then
    #         echo "Another workflow is already running. Aborting current workflow."
    #         exit 31
    #       else
    #         echo "No other running workflows found. Continuing."
    #       fi
      - name: rclone-install
        run: |
          # 安装 rclone
          # curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          curl -O https://beta.rclone.org/rclone-beta-latest-linux-amd64.zip
          unzip rclone-*-amd64.zip
          cd rclone-*-linux-amd64
          sudo mv rclone /usr/bin
          sudo chmod +x /usr/bin/rclone
          # sudo apt-get install rclone
      - name: rclone-config
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE }}
        run: |
          # 写配置文件
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
      - name: rclone-run
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:

          sudo apt-get install fuse3
          sudo mkdir -p /dropbox
          sudo nohup rclone mount dropbox: /dropbox --allow-non-empty --no-gzip-encoding --umask 000 --allow-other --attr-timeout 10m --vfs-cache-mode full --vfs-cache-max-age 5m --vfs-read-chunk-size-limit 10G --buffer-size 100M --vfs-cache-max-size 10G &
      - name: Run openlist container
        run: docker run -d --restart=unless-stopped -v /dropbox/self-hosted/openlist/data:/opt/openlist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name="openlist" openlistteam/openlist:latest
      - name: sleep
        run: |
          sudo sleep 1m    
      - name: Verify docker container is running
        run: docker ps
          # 新增视频压缩步骤
      - name: Compress large videos
        run: |
          # 安装必要工具
          sudo apt-get update
          sudo apt-get install -y ffmpeg python3-pip
          pip3 install vmaf
          
          # 获取大文件列表
          min_size=4294967296  # 4GB in bytes
          large_files=$(rclone ls onedrive:1 --min-size $min_size --size-only --order-by size --descending | awk '{$1=""; print $0}' | sed 's/^ //')
          
          if [ -z "$large_files" ]; then
            echo "No large video files found for compression."
            exit 0
          fi
          
          # 处理每个大文件
          while IFS= read -r file; do
            # 检查是否已压缩
            filename=$(basename "$file")
            dirpath=$(dirname "$file")
            base="${filename%.*}"
            ext="${filename##*.}"
            compressed_file="${base}_compressed.${ext}"
            
            # 检查压缩文件是否已存在
            if rclone ls "onedrive:1/$dirpath/$compressed_file" &> /dev/null; then
              echo "Skipping $file - compressed version already exists"
              continue
            fi
            
            echo "Processing $file..."
            
            # 创建临时目录
            temp_dir=$(mktemp -d)
            cd "$temp_dir"
            
            # 下载文件
            rclone copy "onedrive:1/$file" .
            
            # 原始文件信息
            orig_size=$(stat -c%s "$filename")
            echo "Original size: $((orig_size/1024/1024)) MB"
            
            # 压缩视频 (使用CRF 18保持高质量)
            ffmpeg -i "$filename" -c:v libx265 -crf 18 -preset veryslow -c:a copy "$compressed_file" -y
            
            # 压缩后文件信息
            comp_size=$(stat -c%s "$compressed_file")
            echo "Compressed size: $((comp_size/1024/1024)) MB"
            reduction=$((100 - comp_size * 100 / orig_size))
            echo "Size reduction: ${reduction}%"
            
            # 画质验证 (使用VMAF)
            ffmpeg -i "$compressed_file" -i "$filename" \
                   -lavfi "[0:v][1:v]libvmaf=log_path=vmaf.log:model_path=/usr/local/share/model/vmaf_v0.6.1.json" \
                   -f null - 2> vmaf_output.txt
            
            # 提取VMAF分数
            vmaf_score=$(grep 'VMAF score' vmaf_output.txt | awk '{print $4}')
            echo "VMAF score: $vmaf_score"
            
            # 验证标准 (VMAF > 95 表示高质量)
            if (( $(echo "$vmaf_score > 95" | bc -l) )); then
              echo "Quality maintained. Uploading compressed version."
              # 上传压缩文件
              rclone copy "$compressed_file" "onedrive:1/$dirpath/"
            else
              echo "Quality check failed (VMAF: $vmaf_score). Skipping upload."
            fi
            
            # 清理临时文件
            cd ..
            rm -rf "$temp_dir"
            
          done <<< "$large_files"
      - name: rclone-sync
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:
          echo "==========openlist==========="
          rclone lsf openlist:

          echo "==========  onedrive:  ==========="
          rclone ls onedrive: \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:0  ==========="
          rclone ls onedrive:0 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:1  ==========="
          rclone ls onedrive:1 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:2  ==========="
          rclone ls onedrive:2 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:3  ==========="
          rclone ls onedrive:3 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:4  ==========="
          rclone ls onedrive:4 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:5  ==========="
          rclone ls onedrive:5 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8

          
          # # 统计 onedrive:0 的总大小
          # echo "==========  onedrive:0  ==========="
          # rclone size onedrive:0
          
          # # 统计 onedrive:1 的总大小
          # echo "==========  onedrive:1  ==========="
          # rclone size onedrive:1
          
          # # 统计 onedrive:2 的总大小
          # echo "==========  onedrive:2  ==========="
          # rclone size onedrive:2
          
          # # 统计 onedrive:3 的总大小
          # echo "==========  onedrive:3  ==========="
          # rclone size onedrive:3
          
          # # 统计 onedrive:4 的总大小
          # echo "==========  onedrive:4  ==========="
          # rclone size onedrive:4
          
          # # 统计 onedrive:5 的总大小
          # echo "==========  onedrive:5  ==========="
          # rclone size onedrive:5
          
          # # 统计根目录（排除子目录 1-5）的总大小
          # echo "==========  onedrive: (excluding 1-5) ==========="
          # rclone size onedrive: \
          #     --exclude "1/**" \
          #     --exclude "2/**" \
          #     --exclude "3/**" \
          #     --exclude "4/**" \
          #     --exclude "5/**"
          


          sudo rclone sync onedrive: openlist:baidupanCrypt/onedrive \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --progress --fast-list --size-only --transfers 1 --checkers 32 
     
          sudo rclone sync onedrive:1 openlist:baidupanCrypt/1 --progress --fast-list --size-only --transfers 1 --checkers 32
          sudo rclone sync onedrive:2 openlist:aliyundriveCrypt/2 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          sudo rclone sync onedrive:3 openlist:aliyundriveCrypt/3 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          # sudo rclone sync onedrive:4 openlist:123pan2Crypt/4 --progress --fast-list --size-only --transfers 1 --checkers 32
          # sudo rclone sync onedrive:5 openlist:123pan2Crypt/5 --progress --fast-list --size-only --transfers 1 --checkers 32
        
      - name: Verify docker container is running
        run: docker ps
      - name: sleep
        run: |
          sudo sleep 10m
      - name: send notification
        run: |
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist 任务执行完毕"
