name: openlist

on:
  schedule:
    # - cron: "0 1,7,13,19 * * *"
    - cron: "*/5 * * * *"
  workflow_dispatch:
  # workflow_run:
  #   workflows:
  #     - t
  #   types:
  #     - completed  # 工作流完成后触发
  watch:
    # types: started

jobs:
  build:
    concurrency: openlist-singleton
    runs-on: ubuntu-latest
    # timeout-minutes: 60
    steps:
    #   - name: Check Workflow Status
    #     run: |
    #       # 获取当前工作流的运行ID
    #       CURRENT_RUN_ID=${{ github.run_id }}
    
    #       workflow_runs=$(curl -s -X GET \
    #         -H "Accept: application/vnd.github.v3+json" \
    #         -H "Authorization: Bearer ${{ secrets.PAT }}" \
    #         "https://api.github.com/repos/${{ github.repository }}/actions/runs")
    
    #       # 排除当前运行ID后检查是否有其他运行中的工作流
    #       otherRunning=$(echo "$workflow_runs" | jq --arg current_id "$CURRENT_RUN_ID" \
    #         '.workflow_runs[] | select(.name == "openlist" and .status == "in_progress" and .id != ($current_id | tonumber))')
    
    #       if [[ -n $otherRunning ]]; then
    #         echo "Another workflow is already running. Aborting current workflow."
    #         exit 31
    #       else
    #         echo "No other running workflows found. Continuing."
    #       fi
      - name: rclone-install
        run: |
          # 安装 rclone
          # curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          curl -O https://beta.rclone.org/rclone-beta-latest-linux-amd64.zip
          unzip rclone-*-amd64.zip
          cd rclone-*-linux-amd64
          sudo mv rclone /usr/bin
          sudo chmod +x /usr/bin/rclone
          # sudo apt-get install rclone
      - name: rclone-config
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE }}
        run: |
          # 写配置文件
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
      - name: rclone-run
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:

          sudo apt-get install fuse3
          sudo mkdir -p /dropbox
          sudo nohup rclone mount dropbox: /dropbox --allow-non-empty --no-gzip-encoding --umask 000 --allow-other --attr-timeout 10m --vfs-cache-mode full --vfs-cache-max-age 5m --vfs-read-chunk-size-limit 10G --buffer-size 100M --vfs-cache-max-size 10G &
      - name: Run openlist container
        run: docker run -d --restart=unless-stopped -v /dropbox/self-hosted/openlist/data:/opt/openlist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name="openlist" openlistteam/openlist:latest
      - name: sleep
        run: |
          sudo sleep 1m    
      - name: Verify docker container is running
        run: docker ps
      - name: video-split
        run: |
          # 安装ffmpeg工具和bc计算器
          sudo apt-get update
          sudo apt-get install -y ffmpeg bc
          
          # 创建临时目录用于处理视频
          mkdir -p /tmp/videos
          
          # 列出onedrive:1中超过4G的视频文件
          echo "========== 列出onedrive:1中超过4G的视频文件 ============"
          rclone ls onedrive:1 --min-size 4G --include "*.mp4" --include "*.mkv" --include "*.avi" --include "*.mov" --include "*.wmv" | awk '{print $2}' > /tmp/large_videos.txt
          
          # 检查是否有大视频文件需要处理
          if [ -s /tmp/large_videos.txt ]; then
            echo "找到以下大视频文件需要处理："
            cat /tmp/large_videos.txt
            
            # 遍历每个大视频文件进行切割
            while read -r video_path; do
              echo "处理视频文件: $video_path"
              
              # 提取文件名和扩展名
              filename=$(basename "$video_path")
              extension="${filename##*.}"
              filename_noext="${filename%.*}"
              
              # 创建该视频的临时目录
              video_tmp_dir="/tmp/videos/${filename_noext}"
              mkdir -p "$video_tmp_dir"
              
              # 下载视频文件
              echo "下载视频文件到本地..."
              rclone copy "onedrive:1/$video_path" "$video_tmp_dir/"
              
              # 获取视频文件大小，转换为字节
              video_size=$(stat -c%s "$video_tmp_dir/$filename")
              video_size_gb=$(echo "scale=2; $video_size / 1024 / 1024 / 1024" | bc)
              
              echo "视频大小: ${video_size_gb}GB"
              
              # 定义每段的最大大小（4GB减去100MB作为余量，避免超过限制）
              max_segment_size=$((4000 * 1024 * 1024))
              
              # 检查文件是否真的超过4GB（可能rclone的min-size筛选有误差）
              if [ "$video_size" -le "$max_segment_size" ]; then
                echo "文件大小未超过4GB，无需切割"
                continue
              fi
              
              # 计算需要切割成多少段
              segments=$(echo "$video_size / $max_segment_size" | bc)
              if [ $(echo "$video_size % $max_segment_size" | bc) -gt 0 ]; then
                segments=$((segments + 1))
              fi
              
              echo "计划切割成 ${segments} 段"
              
              # 使用ffprobe获取视频总时长（秒）
              video_duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$video_tmp_dir/$filename")
              video_duration_seconds=$(printf "%.0f" "$video_duration")
              
              # 计算每段视频的目标时长（秒）
              segment_duration=$(echo "$video_duration_seconds / $segments" | bc)
              
              echo "视频总时长: ${video_duration_seconds}秒，每段约 ${segment_duration}秒"
              
              # 使用ffmpeg基于时间切割视频，保持原始编码以确保质量和兼容性
              echo "开始切割视频..."
              ffmpeg -i "$video_tmp_dir/$filename" -c copy -map 0 -f segment -segment_time $segment_duration -reset_timestamps 1 "$video_tmp_dir/${filename_noext}_part_%02d.${extension}"
              
              # 检查切割结果
              echo "切割结果："
              ls -lh "$video_tmp_dir/"
              
              # 获取原文件所在的目录路径
              video_dir=$(dirname "$video_path")
              
              # 上传切割后的视频到原视频所在目录
              echo "上传切割后的视频到原目录..."
              rclone copy "$video_tmp_dir/" "onedrive:1/$video_dir/" --include "${filename_noext}_part_*.${extension}"
              
              # 验证上传是否成功
              echo "验证上传结果..."
              rclone ls "onedrive:1/$video_dir/" --include "${filename_noext}_part_*.${extension}"
              
              # 检查上传后的文件数量，确保上传成功后再删除原文件
              uploaded_count=$(rclone ls "onedrive:1/$video_dir/" --include "${filename_noext}_part_*.${extension}" | wc -l)
              
              if [ "$uploaded_count" -gt 0 ]; then
                echo "切割后的视频上传成功，准备删除原视频文件..."
                # 删除原视频文件
                rclone delete "onedrive:1/$video_path"
                echo "原视频文件已删除: $video_path"
              else
                echo "警告: 切割后的视频上传失败，保留原视频文件"
              fi
              
              echo "视频处理完成: $filename"
            done < /tmp/large_videos.txt
          else
            echo "没有找到超过4G的视频文件需要处理"
          fi
      - name: rclone-sync
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:
          echo "==========openlist==========="
          rclone lsf openlist:

          echo "==========  onedrive:  ==========="
          rclone ls onedrive: \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:0  ==========="
          rclone ls onedrive:0 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:1  ==========="
          rclone ls onedrive:1 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:2  ==========="
          rclone ls onedrive:2 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:3  ==========="
          rclone ls onedrive:3 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:4  ==========="
          rclone ls onedrive:4 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:5  ==========="
          rclone ls onedrive:5 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8

          
          # # 统计 onedrive:0 的总大小
          # echo "==========  onedrive:0  ==========="
          # rclone size onedrive:0
          
          # # 统计 onedrive:1 的总大小
          # echo "==========  onedrive:1  ==========="
          # rclone size onedrive:1
          
          # # 统计 onedrive:2 的总大小
          # echo "==========  onedrive:2  ==========="
          # rclone size onedrive:2
          
          # # 统计 onedrive:3 的总大小
          # echo "==========  onedrive:3  ==========="
          # rclone size onedrive:3
          
          # # 统计 onedrive:4 的总大小
          # echo "==========  onedrive:4  ==========="
          # rclone size onedrive:4
          
          # # 统计 onedrive:5 的总大小
          # echo "==========  onedrive:5  ==========="
          # rclone size onedrive:5
          
          # # 统计根目录（排除子目录 1-5）的总大小
          # echo "==========  onedrive: (excluding 1-5) ==========="
          # rclone size onedrive: \
          #     --exclude "1/**" \
          #     --exclude "2/**" \
          #     --exclude "3/**" \
          #     --exclude "4/**" \
          #     --exclude "5/**"
           


          sudo rclone sync onedrive: openlist:baidupanCrypt/onedrive \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --progress --fast-list --size-only --transfers 1 --checkers 32 
     
          sudo rclone sync onedrive:1 openlist:baidupanCrypt/1 --progress --fast-list --size-only --transfers 1 --checkers 32
          sudo rclone sync onedrive:2 openlist:aliyundriveCrypt/2 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          sudo rclone sync onedrive:3 openlist:aliyundriveCrypt/3 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          # sudo rclone sync onedrive:4 openlist:123pan2Crypt/4 --progress --fast-list --size-only --transfers 1 --checkers 32
          # sudo rclone sync onedrive:5 openlist:123pan2Crypt/5 --progress --fast-list --size-only --transfers 1 --checkers 32
        
      - name: Verify docker container is running
        run: docker ps
      - name: sleep
        run: |
          sudo sleep 10m
      - name: send notification
        run: |
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist 任务执行完毕"




