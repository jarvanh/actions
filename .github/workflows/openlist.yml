name: openlist

on:
  schedule:
    # - cron: "0 1,7,13,19 * * *"
    - cron: "*/5 * * * *"
  workflow_dispatch:
  # workflow_run:
  #   workflows:
  #     - t
  #   types:
  #     - completed  # 工作流完成后触发
  watch:
    # types: started

jobs:
  build:
    concurrency: openlist-singleton
    runs-on: ubuntu-latest
    # timeout-minutes: 60
    steps:
    #   - name: Check Workflow Status
    #     run: |
    #       # 获取当前工作流的运行ID
    #       CURRENT_RUN_ID=${{ github.run_id }}
    
    #       workflow_runs=$(curl -s -X GET \
    #         -H "Accept: application/vnd.github.v3+json" \
    #         -H "Authorization: Bearer ${{ secrets.PAT }}" \
    #         "https://api.github.com/repos/${{ github.repository }}/actions/runs")
    
    #       # 排除当前运行ID后检查是否有其他运行中的工作流
    #       otherRunning=$(echo "$workflow_runs" | jq --arg current_id "$CURRENT_RUN_ID" \
    #         '.workflow_runs[] | select(.name == "openlist" and .status == "in_progress" and .id != ($current_id | tonumber))')
    
    #       if [[ -n $otherRunning ]]; then
    #         echo "Another workflow is already running. Aborting current workflow."
    #         exit 31
    #       else
    #         echo "No other running workflows found. Continuing."
    #       fi
      - name: rclone-install
        run: |
          # 安装 rclone
          # curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          curl -O https://beta.rclone.org/rclone-beta-latest-linux-amd64.zip
          unzip rclone-*-amd64.zip
          cd rclone-*-linux-amd64
          sudo mv rclone /usr/bin
          sudo chmod +x /usr/bin/rclone
          # sudo apt-get install rclone
      - name: rclone-config
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE }}
        run: |
          # 写配置文件
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
      - name: rclone-run
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:

          sudo apt-get install fuse3
          sudo mkdir -p /dropbox
          sudo nohup rclone mount dropbox: /dropbox --allow-non-empty --no-gzip-encoding --umask 000 --allow-other --attr-timeout 10m --vfs-cache-mode full --vfs-cache-max-age 5m --vfs-read-chunk-size-limit 10G --buffer-size 100M --vfs-cache-max-size 10G &
      - name: Run openlist container
        run: docker run -d --restart=unless-stopped -v /dropbox/self-hosted/openlist/data:/opt/openlist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name="openlist" openlistteam/openlist:latest
      - name: sleep
        run: |
          sudo sleep 1m    
      - name: Verify docker container is running
        run: docker ps
      - name: split-large-videos
        run: |
          echo "==========  Split large videos in onedrive:1  ==========="
          # 安装ffmpeg和相关工具用于视频切割
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq
          
          # 查找大于4GB的视频文件并进行切割
          rclone lsf onedrive:1 --include "*.{mp4,mkv,avi,mov,wmv,flv,webm}" --min-size 4G --format "pi" | while IFS='|' read -r path id; do
            echo "发现大于4GB的视频文件: $path"
            
            # 获取文件大小
            size=$(rclone size "onedrive:1/$path" --json | jq -r '.bytes')
            human_size=$(numfmt --to=iec --format="%.2f" $size)
            echo "文件大小: $human_size"
            
            # 如果文件大于4GB，则进行分割
            if [ "$size" -gt 4294967296 ]; then  # 4GB in bytes
              echo "开始分割文件: $path"
              
              # 创建临时工作目录
              work_dir="/tmp/video_split_$(date +%s)"
              mkdir -p "$work_dir/original"
              mkdir -p "$work_dir/split"
              
              # 下载文件到临时目录
              echo "下载文件..."
              if rclone copy "onedrive:1/$path" "$work_dir/original" --progress; then
                echo "文件下载完成"
              else
                echo "文件下载失败，跳过此文件"
                rm -rf "$work_dir"
                continue
              fi
              
              # 获取原始文件名和扩展名
              filename=$(basename "$path")
              name="${filename%.*}"
              extension="${filename##*.}"
              original_file="$work_dir/original/$filename"
              
              # 检查文件是否存在
              if [ ! -f "$original_file" ]; then
                echo "错误：下载的文件不存在: $original_file"
                rm -rf "$work_dir"
                continue
              fi
              
              # 使用ffmpeg按时间分割视频（每个片段约3.5GB以确保安全）
              echo "分割视频文件..."
              
              # 计算每个片段的时长（目标大小3.5GB）
              # 获取视频比特率
              bitrate=$(ffprobe -v quiet -show_entries format=bit_rate -of csv=p=0 "$original_file")
              if [ -n "$bitrate" ] && [ "$bitrate" -gt 0 ]; then
                # 根据比特率计算每个片段的时长（3.5GB）
                # 3.5GB = 3.5 * 8 * 1024 * 1024 * 1024 bits
                segment_seconds=$((35 * 8 * 1024 * 1024 * 1024 / 10 / bitrate))
                # 至少保证10分钟，最多2小时
                if [ "$segment_seconds" -lt 600 ]; then
                  segment_time=600
                elif [ "$segment_seconds" -gt 7200 ]; then
                  segment_time=7200
                else
                  segment_time=$segment_seconds
                fi
              else
                # 如果无法获取比特率，使用默认1小时
                segment_time=3600
              fi
              
              echo "每个片段时长: $segment_time 秒"
              
              # 执行分割
              if ffmpeg -i "$original_file" -c copy -map 0 -f segment -segment_time "$segment_time" -reset_timestamps 1 "$work_dir/split/${name}_part_%03d.${extension}"; then
                echo "视频分割完成"
                
                # 检查是否生成了分割文件
                if ls "$work_dir/split"/*.$extension 1> /dev/null 2>&1; then
                  # 上传分割后的文件
                  echo "上传分割后的文件..."
                  if rclone copy "$work_dir/split" "onedrive:1/${name}_parts" --progress; then
                    echo "分割文件上传完成"
                    # 可选：删除原始大文件
                    # echo "删除原始大文件..."
                    # rclone delete "onedrive:1/$path"
                  else
                    echo "分割文件上传失败"
                  fi
                else
                  echo "未生成分割文件"
                fi
              else
                echo "视频分割失败"
              fi
              
              # 清理临时文件
              rm -rf "$work_dir"
              
              echo "文件处理完成: $path"
            else
              echo "文件未超过4GB限制，无需分割: $path"
            fi
          done
      - name: rclone-sync
        run: |
          echo "==========onedrive==========="
          rclone lsf onedrive:
          echo "==========dropbox==========="
          rclone lsf dropbox:
          echo "==========openlist==========="
          rclone lsf openlist:

          echo "==========  onedrive:  ==========="
          rclone ls onedrive: \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:0  ==========="
          rclone ls onedrive:0 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:1  ==========="
          rclone ls onedrive:1 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:2  ==========="
          rclone ls onedrive:2 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:3  ==========="
          rclone ls onedrive:3 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:4  ==========="
          rclone ls onedrive:4 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8
          echo "==========  onedrive:5  ==========="
          rclone ls onedrive:5 --min-size 4G --size-only --order-by size | awk '{printf "%s\t%s\n", $1, $2}' | numfmt --to=iec --field=1 --padding=8

          
          # # 统计 onedrive:0 的总大小
          # echo "==========  onedrive:0  ==========="
          # rclone size onedrive:0
          
          # # 统计 onedrive:1 的总大小
          # echo "==========  onedrive:1  ==========="
          # rclone size onedrive:1
          
          # # 统计 onedrive:2 的总大小
          # echo "==========  onedrive:2  ==========="
          # rclone size onedrive:2
          
          # # 统计 onedrive:3 的总大小
          # echo "==========  onedrive:3  ==========="
          # rclone size onedrive:3
          
          # # 统计 onedrive:4 的总大小
          # echo "==========  onedrive:4  ==========="
          # rclone size onedrive:4
          
          # # 统计 onedrive:5 的总大小
          # echo "==========  onedrive:5  ==========="
          # rclone size onedrive:5
          
          # # 统计根目录（排除子目录 1-5）的总大小
          # echo "==========  onedrive: (excluding 1-5) ==========="
          # rclone size onedrive: \
          #     --exclude "1/**" \
          #     --exclude "2/**" \
          #     --exclude "3/**" \
          #     --exclude "4/**" \
          #     --exclude "5/**"


          sudo rclone sync onedrive: openlist:baidupanCrypt/onedrive \
              --exclude "1/**" \
              --exclude "2/**" \
              --exclude "3/**" \
              --exclude "4/**" \
              --exclude "5/**" \
              --progress --fast-list --size-only --transfers 1 --checkers 32 
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 任务执行完毕"
     
          sudo rclone sync onedrive:1 openlist:baidupanCrypt/1 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 1 任务执行完毕"

          sudo rclone sync onedrive:2 openlist:aliyundriveCrypt/2 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 2 任务执行完毕"

          sudo rclone sync onedrive:3 openlist:aliyundriveCrypt/3 -vv --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 3 任务执行完毕"

          sudo rclone sync onedrive:4 openlist:123pan2Crypt/4 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 4任务执行完毕"

          sudo rclone sync onedrive:5 openlist:123pan2Crypt/5 --progress --fast-list --size-only --transfers 1 --checkers 32
          curl -s -X POST https://api.telegram.org/bot'${{ secrets.TELEGRAM_BOT_TOKEN }}'/sendMessage -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' -d text="github openlist onedrive 5任务执行完毕"
