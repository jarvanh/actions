name: teslamate

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
  watch:
    # types: started

jobs:
  build:
    concurrency: teslamate-singleton
    runs-on: ubuntu-latest
    steps:
      - name: rclone-install
        run: |
          curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip rclone-*-amd64.zip
          cd rclone-*-linux-amd64
          sudo mv rclone /usr/bin
          sudo chmod +x /usr/bin/rclone
          
      - name: rclone-config
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE }}
        run: |
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
          
      - name: Download and extract teslamate.tar.gz
        run: |
          # 创建本地工作目录
          mkdir -p ./teslamate
          
          # 检查压缩文件是否存在
          if rclone ls dropbox:self-hosted/teslamate.tar.gz > /dev/null 2>&1; then
            echo "找到 teslamate.tar.gz，正在下载..."
            rclone copy dropbox:self-hosted/teslamate.tar.gz ./
            
            echo "解压缩..."
            # 关键修改：解压到当前目录并保留原始结构
            tar -xzf teslamate.tar.gz -C ./
            echo "解压缩完成"
          else
            echo "未找到 teslamate.tar.gz，使用空目录"
          fi
          
          echo "当前目录内容:"
          ls -la
          
          echo "Teslamate目录内容:"
          ls -la ./teslamate
          
      - name: Set permissions
        run: |
          if [ -d "./teslamate/teslamate-grafana-data" ]; then
              sudo chown -R 472:472 ./teslamate/teslamate-grafana-data/
              echo "teslamate-grafana-data 权限修改成功"
          else
              echo "警告: teslamate-grafana-data 目录不存在，跳过权限修改"
          fi
          
          if [ -d "./teslamate/teslamate-db" ]; then
              sudo chown -R 999:999 ./teslamate/teslamate-db/
              echo "teslamate-database-data 权限修改成功"
          else
              echo "警告: teslamate-db 目录不存在，跳过权限修改"
          fi
          
      - name: Check if the tunnel is running
        env:
          TUNNEL_NAME: "t"
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          sudo mkdir ~/.cloudflared/
          sudo rclone copy dropbox:self-hosted/.cloudflared ~/.cloudflared -vv

          OUTPUT=$(cloudflared tunnel list)
          TUNNEL_LINE=$(echo "$OUTPUT" | grep -w "$TUNNEL_NAME")
          if [ -z "$TUNNEL_LINE" ]; then
            echo "The tunnel '$TUNNEL_NAME' does not exist. Proceeding."
            exit 0
          fi
  
          CONNECTIONS=$(echo "$TUNNEL_LINE" | awk '{if (NF>=4) print $4; else print "-"}')
          if [ "$CONNECTIONS" == "-" ]; then
            echo "The tunnel '$TUNNEL_NAME' exists but has no active connections. Proceeding."
          else
            echo "The tunnel '$TUNNEL_NAME' is running with connections: $CONNECTIONS. Stopping actions."
            exit 31
          fi
            
      - name: Run teslamate container
        run: |
          # 关键修改：直接进入解压后的teslamate目录
          cd ./teslamate
          echo "当前工作目录: $(pwd)"
          echo "目录内容:"
          ls -la
          
          sudo docker compose -p teslamate up -d
          
      - name: sleep
        run: |
          sudo sleep 1m    
          
      - name: Verify docker container is running
        run: docker ps 
        
      - name: run cloudflared
        run: |
          cloudflared tunnel route dns t t.'${{ secrets.VD }}'.eu.org
          nohup cloudflared tunnel run --url http://127.0.0.1:5900 t &
          
      - name: Verify docker container is running
        run: docker ps 
      
      - name: Upgrade PostgreSQL with full state checks
        run: |
          cd ./teslamate
          
          # 检查是否需要升级
          CURRENT_VERSION=$(grep 'image: postgres:' docker-compose.yml | cut -d':' -f3)
          TARGET_VERSION="15"
          
          if [ "$CURRENT_VERSION" == "$TARGET_VERSION" ]; then
            echo "PostgreSQL 已是最新版本 ($TARGET_VERSION)，跳过升级"
            exit 0
          fi
          
          echo "当前 PostgreSQL 版本: $CURRENT_VERSION，开始升级到 $TARGET_VERSION..."
          
          # 检查旧数据库状态
          OLD_DB_EXISTS=$(sudo docker compose -p teslamate exec -T database psql -U teslamate -lqt | cut -d \| -f 1 | grep -w teslamate | wc -l)
          OLD_TABLE_COUNT=$(sudo docker compose -p teslamate exec -T database psql -U teslamate -d teslamate -c "SELECT COUNT(*) FROM pg_tables WHERE schemaname = 'public';" -t | tr -d '[:space:]')
          
          if [ "$OLD_DB_EXISTS" -eq 1 ] && [ "$OLD_TABLE_COUNT" -gt 10 ]; then
            echo "旧数据库存在且包含 $OLD_TABLE_COUNT 张表，需要备份"
            NEED_BACKUP=true
            # 备份到容器内的 /tmp 目录
            sudo docker compose -p teslamate exec -T database pg_dump -U teslamate -d teslamate > /tmp/teslamate_data.sql
          else
            echo "旧数据库不存在或为空（$OLD_TABLE_COUNT 张表），无需备份"
            NEED_BACKUP=false
          fi
          
          # 停止容器
          sudo docker compose -p teslamate down
          
          # 备份旧数据卷
          sudo mv teslamate-db teslamate-db-old
          
          # 更新版本
          sed -i "s|image: postgres:[0-9.]*|image: postgres:$TARGET_VERSION|" docker-compose.yml
          
          # 启动新容器
          sudo docker compose -p teslamate up -d
          sleep 3m
          
          # 检查新数据库状态
          NEW_DB_EXISTS=$(sudo docker compose -p teslamate exec -T database psql -U teslamate -lqt | cut -d \| -f 1 | grep -w teslamate | wc -l)
          NEW_TABLE_COUNT=$(sudo docker compose -p teslamate exec -T database psql -U teslamate -d teslamate -c "SELECT COUNT(*) FROM pg_tables WHERE schemaname = 'public';" -t | tr -d '[:space:]')
          
          # 创建数据库（如果需要）
          if [ "$NEW_DB_EXISTS" -eq 0 ]; then
            echo "创建新数据库..."
            sudo docker compose -p teslamate exec -T database createdb -U teslamate teslamate
            # 创建后重新检查表数量
            NEW_TABLE_COUNT=0
          fi
          
          # 决定是否需要恢复
          if [ "$NEED_BACKUP" = true ] && [ "$NEW_TABLE_COUNT" -eq 0 ]; then
            echo "新数据库为空，恢复数据..."
            # 使用容器内的备份文件
            sudo docker compose -p teslamate exec -T database psql -U teslamate -d teslamate -f /tmp/teslamate_data.sql
            
            # 删除容器内的备份文件
            sudo docker compose -p teslamate exec -T database rm -f /tmp/teslamate_data.sql
          elif [ "$NEED_BACKUP" = true ]; then
            echo "新数据库已有数据($NEW_TABLE_COUNT 张表)，跳过恢复"
            # 删除容器内的备份文件
            sudo docker compose -p teslamate exec -T database rm -f /tmp/teslamate_data.sql
          fi
          
          # 验证
          echo "验证升级:"
          sudo docker compose -p teslamate exec database psql -U teslamate -d teslamate -c "SELECT version();"
          sudo docker compose -p teslamate exec database psql -U teslamate -d teslamate -c "SELECT COUNT(*) FROM pg_tables WHERE schemaname = 'public';"
          
          echo "PostgreSQL 升级完成!"
    
      - name: Clean up incomplete data
        run: |
          cd ./teslamate
          
          # 清理行驶记录
          DRIVES_DELETED=$(sudo docker compose -p teslamate exec -T database psql -U teslamate -d teslamate -t -c "DELETE FROM drives WHERE end_date IS NULL AND distance IS NULL AND duration_min IS NULL RETURNING COUNT(*);" | tr -d '[:space:]')
          DRIVES_DELETED=${DRIVES_DELETED:-0}  # 默认为0
          
          # 清理充电记录
          CHARGING_DELETED=$(sudo docker compose -p teslamate exec -T database psql -U teslamate -d teslamate -t -c "DELETE FROM charging_processes WHERE end_date IS NULL OR charge_energy_added IS NULL OR end_battery_level IS NULL RETURNING COUNT(*);" | tr -d '[:space:]')
          CHARGING_DELETED=${CHARGING_DELETED:-0}  # 默认为0
          
          # 获取剩余记录
          DRIVES_REMAINING=$(sudo docker compose -p teslamate exec -T database psql -U teslamate -d teslamate -t -c "SELECT COUNT(*) FROM drives WHERE end_date IS NULL;" | tr -d '[:space:]')
          CHARGING_REMAINING=$(sudo docker compose -p teslamate exec -T database psql -U teslamate -d teslamate -t -c "SELECT COUNT(*) FROM charging_processes WHERE end_date IS NULL;" | tr -d '[:space:]')
          
          # 格式化输出
          echo ""
          echo "======================================"
          echo "          数据清理报告"
          echo "======================================"
          printf "%-15s | %-10s | %-10s\n" "记录类型" "已删除" "剩余"
          printf "%-15s | %-10s | %-10s\n" "行驶记录" "$DRIVES_DELETED" "$DRIVES_REMAINING"
          printf "%-15s | %-10s | %-10s\n" "充电记录" "$CHARGING_DELETED" "$CHARGING_REMAINING"
          echo "======================================"
          echo ""
          
          # 如果有剩余记录，显示警告
          if [ "$DRIVES_REMAINING" -gt 0 ] || [ "$CHARGING_REMAINING" -gt 0 ]; then
            echo "警告: 仍有无效记录存在，可能需要进一步处理"
          fi
          
      - name: sleep
        run: |
          sudo sleep 3m          
          
      - name: Stop and backup
        run: |
          cd ./teslamate
          mkdir -p backup
          
          # 执行数据库备份
          sudo docker compose -p teslamate exec -T database pg_dump -U teslamate teslamate > ./backup/teslamate_$(date +"%Y-%m-%d").bck
          
          # 停止容器
          sudo docker compose -p teslamate stop
          sleep 1m
          
          # 保留最新的7个备份
          cd backup
          ls -t teslamate_*.bck | tail -n +8 | xargs -r sudo rm -f
          
      - name: Compress and upload
        run: |
          # 关键修改：从正确位置压缩整个目录
          echo "正在压缩目录..."
          sudo tar -czf teslamate.tar.gz ./teslamate
          
          # 上传到Dropbox
          echo "上传到Dropbox..."
          rclone sync -v teslamate.tar.gz dropbox:self-hosted/
          
          echo "完成 ✅"
